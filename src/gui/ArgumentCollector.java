package gui;

import java.util.Observable;

class ArgumentCollector extends Observable{
	public enum Event {SEQUENCE_TYPE_CHANGE, ALGORITHM_CHANGE, MATRIX_TYPE_CHANGE, SEQUENCE_A_CHANGE, SEQUENCE_B_CHANGE, MATRIX_DATA_CHANGED, GAP_PENALTY_CHANGE}
	
	private boolean readyToRock = false;
	//Arguments in order of gui layout
	
	//DNA/RNA/Protien
	private Definitions type;
	
	//Algorithm Type
	public enum Algorithm { NEEDLEMANWUNSCH, SMITHWATERMAN };
	private Algorithm algorithm;
	
	//Matrix Selection
	public enum Matrix {
		NCUSTOM(new int[][]{{1,-1,-1,-1},{-1,1,-1,-1},{-1,-1,1,-1},{-1,-1,-1,1}}),
        PCUSTOM(new int[][]{
				{4,-3,-1,-1,-3,-2,0,1,-3,-2,-3,-3,2,-5,1,1,1,-7,-4,0,-9},
				{-3,7,-2,-4,-5,1,-3,-5,1,-3,-5,2,-1,-6,-1,-1,-3,1,-6,-4,-9},
				{-1,-2,5,3,-5,-1,1,-1,2,-3,-4,1,-4,-5,-2,1,0,-5,-2,-3,-9},
				{-1,-4,3,5,-7,0,4,-1,-1,-4,-6,-1,-5,-8,-3,-1,-2,-9,-6,-4,-9},
				{-3,-5,-5,-7,9,-8,-8,-5,-4,-3,-8,-8,-7,-7,-4,-1,-4,-9,-6,-4,-9},
				{-2,1,-1,0,-8,6,2,-3,3,-4,-2,0,-2,-7,-1,-2,-2,-7,-6,-3,-9},
				{0,-3,1,4,-8,2,5,-1,-1,-3,-5,-1,-4,-8,-2,-1,-2,-9,-5,-3,-9},
				{1,-5,-1,-1,-5,-3,-1,5,-4,-5,-6,-3,-4,-6,-2,0,-2,-9,-7,-3,-9},
				{-3,1,2,-1,-4,3,-1,-4,7,-4,-3,-2,-4,-3,-1,-2,-3,-4,-1,-3,-9},
				{-2,-3,-3,-4,-3,-4,-3,-5,-4,6,1,-3,1,0,-4,-3,0,-7,-3,3,-9},
				{-3,-5,-4,-6,-8,-2,-5,-6,-3,1,6,-4,3,0,-4,-4,-3,-3,-3,0,-9},
				{-3,2,1,-1,-8,0,-1,-3,-2,-3,-4,5,0,-7,-3,-1,-1,-6,-6,-4,-9},
				{-2,-1,-4,-5,-7,-2,-4,-4,-4,1,3,0,9,-1,-4,-3,-1,-6,-5,1,-9},
				{-5,-6,-5,-8,-7,-7,-8,-6,-3,0,0,-7,-1,8,-6,-4,-5,-1,4,-3,-9},
				{1,-1,-2,-3,-4,-1,-2,-2,-1,-4,-4,-3,-4,-6,7,0,-1,-7,-7,-7,-3,-9},
				{1,-1,1,-1,-1,-2,-1,0,-2,-3,-4,-1,-3,-4,0,4,2,-3,-4,-2,-9},
				{1,-3,0,-2,-4,-2,-2,-2,-3,0,-3,-1,-1,-5,-1,2,5,-7,-4,0,-1,-2,0,-9},
				{-7,1,-5,-9,-9,-7,-9,-9,-4,-7,-3,-6,-6,-1,-7,-3,-7,12,-2,-9,-9},
				{-4,-6,-2,-6,-1,-6,-5,-7,-1,-3,-3,-6,-5,4,-7,-4,-4,-2,9,-4,-9},
				{0,-4,-3,-4,-3,-3,-3,-3,-3,3,0,-4,1,-3,-3,-2,0,-9,-4,5,-9},
				{-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,1}}),
		SIMPLE(new int[][]{{1,-1,-1,-1},{-1,1,-1,-1},{-1,-1,1,-1},{-1,-1,-1,1}}),
		TRANSITION(new int[][]{{2,-5,-7,-7},{-5,2,-7,-7},{-7,-7,2,-5},{-7,-7,-5,2}}),
		IDENTITY(new int[][]{{1,0,0,0},{0,1,0,0},{0,0,1,0},{0,0,0,1}}),
		PAM100(new int[][]{
				{4,-3,-1,-1,-3,-2,0,1,-3,-2,-3,-3,2,-5,1,1,1,-7,-4,0,-9},
				{-3,7,-2,-4,-5,1,-3,-5,1,-3,-5,2,-1,-6,-1,-1,-3,1,-6,-4,-9},
				{-1,-2,5,3,-5,-1,1,-1,2,-3,-4,1,-4,-5,-2,1,0,-5,-2,-3,-9},
				{-1,-4,3,5,-7,0,4,-1,-1,-4,-6,-1,-5,-8,-3,-1,-2,-9,-6,-4,-9},
				{-3,-5,-5,-7,9,-8,-8,-5,-4,-3,-8,-8,-7,-7,-4,-1,-4,-9,-6,-4,-9},
				{-2,1,-1,0,-8,6,2,-3,3,-4,-2,0,-2,-7,-1,-2,-2,-7,-6,-3,-9},
				{0,-3,1,4,-8,2,5,-1,-1,-3,-5,-1,-4,-8,-2,-1,-2,-9,-5,-3,-9},
				{1,-5,-1,-1,-5,-3,-1,5,-4,-5,-6,-3,-4,-6,-2,0,-2,-9,-7,-3,-9},
				{-3,1,2,-1,-4,3,-1,-4,7,-4,-3,-2,-4,-3,-1,-2,-3,-4,-1,-3,-9},
				{-2,-3,-3,-4,-3,-4,-3,-5,-4,6,1,-3,1,0,-4,-3,0,-7,-3,3,-9},
				{-3,-5,-4,-6,-8,-2,-5,-6,-3,1,6,-4,3,0,-4,-4,-3,-3,-3,0,-9},
				{-3,2,1,-1,-8,0,-1,-3,-2,-3,-4,5,0,-7,-3,-1,-1,-6,-6,-4,-9},
				{-2,-1,-4,-5,-7,-2,-4,-4,-4,1,3,0,9,-1,-4,-3,-1,-6,-5,1,-9},
				{-5,-6,-5,-8,-7,-7,-8,-6,-3,0,0,-7,-1,8,-6,-4,-5,-1,4,-3,-9},
				{1,-1,-2,-3,-4,-1,-2,-2,-1,-4,-4,-3,-4,-6,7,0,-1,-7,-7,-7,-3,-9},
				{1,-1,1,-1,-1,-2,-1,0,-2,-3,-4,-1,-3,-4,0,4,2,-3,-4,-2,-9},
				{1,-3,0,-2,-4,-2,-2,-2,-3,0,-3,-1,-1,-5,-1,2,5,-7,-4,0,-1,-2,0,-9},
				{-7,1,-5,-9,-9,-7,-9,-9,-4,-7,-3,-6,-6,-1,-7,-3,-7,12,-2,-9,-9},
				{-4,-6,-2,-6,-1,-6,-5,-7,-1,-3,-3,-6,-5,4,-7,-4,-4,-2,9,-4,-9},
				{0,-4,-3,-4,-3,-3,-3,-3,-3,3,0,-4,1,-3,-3,-2,0,-9,-4,5,-9},
				{-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,1}}),
		PAM150(new int[][]{
				{3,-2,0,0,-2,-1,0,1,-2,-1,-2,-2,-1,-4,1,1,1,-6,-3,0,-7},
				{-2,6,-1,-2,-4,1,-2,-3,1,-2,-3,3,-1,-4,-1,-1,-2,1,-4,-3,-7},
				{0,-1,3,2,-4,0,1,0,2,-2,-3,1,-2,-4,-1,1,0,-4,-2,-2-7},
				{0,-2,2,4,-6,1,3,0,0,-3,-5,-1,-3,-6,-2,0,-1,-7,-4,-3,-7},
				{-2,-4,-4,-6,9,-6,-6,-4,-3,-2,-6,-6,-5,-5,-3,0,-3,7,0,-2,-7},
				{-1,1,0,1,-6,5,2,-2,3,-3,-2,0,-1,-5,0,-1,-1,-5,-4,-2,-7},
				{0,-2,1,3,-6,2,4,-1,0,-2,-4,-1,-2,-6,-1,-1,-1,-7,-4,-2,-7},
				{1,-3,0,0,-4,-2,-1,4,-3,-3,-4,-2,-3,-5,-1,1,-1,-7,-5,-2,-7},
				{-2,1,2,0,-3,3,0,-3,6,-3,-2,-1,-3,-2,-1,-1,-2,-3,0,-3,-7},
				{-1,-2,-2,-3,-2,-3,-2,-3,-3,5,1,-2,2,0,-3,-2,0,-5,-2,3,-7},
				{-2,-3,-3,-5,-6,-2,-4,-4,-2,1,5,-3,3,1,-3,-3,-2,-2,-2,1,-7},
				{-2,3,1,-1,-6,0,-1,-2,-1,-2,-3,4,0,-6,-2,-1,0,-4,-4,-3,-7},
				{-1,-1,-2,-3,-5,-1,-2,-3,-3,2,3,0,7,-1,-3,-2,-1,-5,-3,1,-7},
				{-4,-4,-4,-6,-5,-5,-6,-5,-2,0,1,-6,-1,7,-5,-3,-3,-1,5,-2,-7},
				{1,-1,-1,-2,-3,0,-1,-1,-1,-3,-3,-2,-3,-5,6,1,0,-6,-5,-2,-7},
				{1,-1,1,0,0,-1,-1,1,-2,-3,-1,-2,-3,1,2,1,-2,-3,-1,-7},
				{1,-2,-0,-1,-3,-1,-1,-1,-2,0,-2,0,-1,-3,0,1,4,-5,-3,0,-7},
				{-6,1,-4,-7,-7,-5,-7,-7,-4,-6,-2,-4,-5,-1,-6,-2,-5,12,-1,-6,-7},
				{-3,-4,-2,-4,0,-4,-4,-5,0,-2,-2,-4,-3,5,-5,-3,-3,-1,8,-3,-7},
				{0,-3,-2,-3,-2,-2,-2,-2,-3,3,1,-3,1,-2,-2,-1,0,-6,-3,4,-7},
				{-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,-7,1}}),
		PAM250(new int[][]{
				{2,-2,0,0,-2,0,0,1,-1,-1,-2,-1,-1,-3,1,1,1,-6,-3,0,-8},
				{-2,6,0,-1,-4,1,-1,-3,2,-2,-3,3,0,-4,0,0,-1,2,-4,-2,-8},
				{0,0,2,2,-4,1,1,0,2,-2,-3,1,-2,-3,0,1,0,-4,-2,-2,-8},
				{0,-1,2,4,-5,2,3,1,1,-2,-4,0,-3,-6,-1,0,0,-7,-4,-2,-8},
				{-2,-4,-4,-5,12,-5,-5,-3,-3,-2,-6,-5,-5,-4,-3,0,-2,-8,0,-2,-8},
				{0,1,1,2,-5,4,2,-1,3,-2,-2,1,-1,-5,0,-1,-1,-5,-4,-2,-8},
				{0,-1,1,3,-5,2,4,0,1,-2,-3,0,-2,-5,-1,0,0,-7,-4,-2,-8},
				{1,-3,0,1,-3,-1,0,5,-2,-3,-4,-2,-3,-5,0,1,0,-7,-5,-1,-8},
				{-1,2,2,1,-3,3,1,-2,6,-2,-2,0,-2,-2,0,-1,-1,-3,0,-2,-8},
				{-1,-2,-2,-2,-2,-2,-2,-3,-2,5,2,-2,2,1,-2,-1,0,-5,-1,4,-8},
				{-2,-3,-3,-4,-6,-2,-3,-4,-2,2,6,-3,4,2,-3,-3,-2,-2,-1,2,-8},
				{-1,3,1,0,-5,1,0,-2,0,-2,-3,5,0,-5,-1,0,0,-3,-4,-2,-8},
				{-1,0,-2,-3,-5,-1,-2,-3,-2,2,4,0,6,0,-2,-2,-1,-4,-2,2,-8},
				{-4,-4,-4,-6,-4,-5,-5,-5,-2,1,2,-5,0,9,-5,-3,-3,0,7,-1,-8},
				{1,0,-1,-1,-3,0,-1,-1,0,-2,-3,-1,-2,-5,6,1,0,-6,-5,-1,-8},
				{1,0,1,0,0,-1,0,1,-1,-1,-3,0,-2,-3,1,2,1,-2,-3,-1,-8},
				{1,-1,0,0,-2,-1,0,0,-1,0,-2,0,-1,-2,0,1,3,-5,-3,0,-8},
				{-6,2,-4,-7,-8,-5,-7,-7,-3,-5,-2,-3,-4,0,-6,-2,-5,17,0,-6,-8},
				{-3,-4,-2,-4,0,-4,-4,-5,0,-1,-1,-4,-2,7,-5,-3,-3,0,10,-2,-8},
				{0,-2,-2,-2,-2,-2,-2,-1,-2,4,2,-2,2,-1,-1,-1,0,-6,-2,4,-8},
				{-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,-8,1}}),
		BLOSSUM60(new int[][]{
				{4,-1,-1,-2,0,-1,-1,0,-2,-1,-1,-1,-1,-2,-1,1,0,-3,-2,0,-4},
				{-1,5,0,-1,-3,1,0,-2,0,-3,-2,2,-1,-3,-2,-1,-1,-3,-2,-2,-4},
				{-1,0,6,1,-2,0,0,0,1,-3,-3,0,-2,-3,-2,1,0,-4,-2,-3,-4},
				{-2,-1,1,6,-3,0,2,-1,-1,-3,-3,-1,-3,-3,-1,0,-1,-4,-3,-3,4},
				{0,-3,-2,-3,9,-3,-3,-2,-3,-1,-1,-3,-1,-2,-3,-1,-1,-2,-2,-1,-4},
				{-1,1,0,0,-3,5,2,-2,1,-3,-2,1,0,-3,-1,0,-1,-2,-1,-2,-4},
				{-1,0,0,2,-3,2,5,-2,0,-3,-3,1,-2,-3,-1,0,-1,-3,-2,-2,-4},
				{0,-2,0,-1,-2,-2,-2,6,-2,-3,-4,-1,-2,-3,-2,0,-2,-2,-3,-3,-4},
				{-2,0,1,-1,-3,1,0,-2,7,-3,-3,-1,-1,-1,-2,-1,-2,-2,2,-3,-4},
				{-1,-3,-3,-3,-1,-3,-3,-3,-3,4,2,-3,1,0,-3,-2,-1,-2,-1,3,-4},
				{-1,-2,-3,-3,-1,-2,-3,-4,-3,2,4,-2,2,0,-3,-2,-1,-2,-1,1,-4},
				{-1,2,0,-1,-3,1,1,-1,-1,-3,-2,4,-1,-3,-1,0,-1,-3,-2,-2,-4},
				{-1,-1,-2,-3,-1,0,-2,-2,-1,1,2,-1,5,0,-2,-1,-1,-1,-1,1,-4},
				{-2,-3,-3,-3,-2,-3,-3,-3,-1,0,0,-3,0,6,-4,-2,-2,1,3,-1,-4},
				{-1,-2,-2,-1,-3,-1,-1,-2,-2,-3,-3,-1,-2,-4,7,-1,-1,-4,-3,-2,-4},
				{1,-1,1,0,-1,0,0,0,-1,-2,-2,0,-1,-2,-1,4,1,-3,-2,-2,-4},
				{0,-1,0,-1,-1,-1,-1,-2,-2,-1,-1,-1,-1,-2,-1,1,4,-2,-2,0,-4},
				{-3,-3,-4,-4,-2,-2,-3,-2,-2,-2,-2,-3,-1,1,-4,-3,-2,10,2,-3,-4},
				{-2,-2,-2,-3,-2,-1,-2,-3,2,-1,-1,-2,-1,3,-3,-2,-2,2,6,-1,-4},
				{0,-2,-3,-3,-1,-2,-2,-3,-3,3,1,-2,1,-1,-2,-2,0,-3,-1,4,-4},
				{-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,1}}),
		BLOSSUM62(new int[][]{
				{4,-1,-2,-2,0,-1,-1,0,-2,-1,-1,-1,-1,-2,-1,1,0,-3,-2,0,-4},
				{-1,5,0,-2,-3,1,0,-2,0,-3,-2,2,-1,-3,-2,-1,-1,-3,-2,-3,-4},
				{-2,0,6,1,-3,0,0,0,1,-3,-3,0,-2,-3,-2,1,0,-4,-2,-3,-4},
				{-2,-2,1,6,-3,0,2,-1,-1,-3,-4,-1,-3,-3,-1,0,-1,-4,-3,-3,-4},
				{0,-3,-3,-3,9,-3,-4,-3,-3,-1,-1,-3,-1,-2,-3,-1,-1,-2,-2,-1,-4},
				{-1,1,0,0,-3,5,2,-2,0,-3,-2,1,0,-3,-1,0,-1,-2,-1,-2,-4},
				{-1,0,0,2,-4,2,5,-2,0,-3,-3,1,-2,-3,-1,0,-1,-3,-2,-2,-4},
				{0,-2,0,-1,-3,-2,-2,6,-2,-4,-4,-2,-3,-3,-2,0,-2,-2,-3,-3,-4},
				{-2,0,1,-1,-3,0,0,-2,8,-3,-3,-1,-2,-1,-2,-1,-2,-2,2,-3,-4},
				{-1,-3,-3,-3,-1,-3,-3,-4,-3,4,2,-3,1,0,-3,-2,-1,-3,-1,3,-4},
				{-1,-2,-3,-4,-1,-2,-3,-4,-3,2,4,-2,2,0,-3,-2,-1,-2,-1,1,-4},
				{-1,2,0,-1,-3,1,1,-2,-1,-3,-2,5,-1,-3,-1,0,-1,-3,-2,-2,-4},
				{-1,-1,-2,-3,-1,0,-2,-3,-2,1,2,-1,5,0,-2,-1,-1,-1,-1,1,-4},
				{-2,-3,-3,-3,-2,-3,-3,-3,-1,0,0,-3,0,6,-4,-2,-2,1,3,-1,-4},
				{-1,-2,-2,-1,-3,-1,-1,-2,-2,-3,-3,-1,-2,-4,7,-1,-1,-4,-3,-2,-4},
				{1,-1,1,0,-1,0,0,0,-1,-2,-2,0,-1,-2,-1,4,1,-3,-2,-2,-4},
				{0,-1,0,-1,-1,-1,-1,-2,-2,-1,-1,-1,-1,-2,-1,1,5,-2,-2,0,-4},
				{-3,-3,-4,-4,-2,-2,-3,-2,-2,-3,-2,-3,-1,1,-4,-3,-2,11,2,-3,-4},
				{-2,-2,-2,-3,-2,-1,-2,-3,2,-1,-1,-2,-1,3,-3,-2,-2,2,7,-1,-4},
				{0,-3,-3,-3,-1,-2,-2,-3,-3,3,1,-2,1,-1,-2,-2,0,-3,-1,4,-4},
				{-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,-4,1}});

		private int[][] data;
		Matrix(int[][] data){
			this.data = data;
		}

		Matrix(){
			//For an undefined matrix.
			this.data = null;
		}

		public int[][] getPrebuiltMatrix(){
			return data;
		}
	}
	private Matrix matrixType;
	
	private String sequenceA;
	private String sequenceB;
	
	private int[][] matrixData;
    private String rowHeaders;
    private String columnHeaders;
	private int gapPenalty;
	
	public void readyToRock(){
		readyToRock = true;
		notifyObservers(Event.SEQUENCE_TYPE_CHANGE);
	}
	
	private void notifyIfReady(Event event) {
		setChanged();
		if(areYouReady()){
			notifyObservers(event);
		}
	}

    /**
     * Returns if all nullable collector fields are non-null.
     * @return
     */
	public boolean areYouReady()
    {
        return readyToRock && checkNoNulls();
    }
		
	public Definitions getType() {
		return type;
	}
	public void setType(Definitions type) {
		this.type = type;
		notifyIfReady(Event.SEQUENCE_TYPE_CHANGE);
	}
	
	public Algorithm getAlgorithm() {
		return algorithm;
	}
	public void setAlgorithm(Algorithm algorithm) {
		this.algorithm = algorithm;
		notifyIfReady(Event.ALGORITHM_CHANGE);
	}
	public Matrix getMatrixType() {
		return matrixType;
	}
	public void setMatrixType(Matrix matrixType) {
		this.matrixType = matrixType;
		setMatrixData(matrixType.getPrebuiltMatrix());
		notifyIfReady(Event.MATRIX_TYPE_CHANGE);
	}
	public String getSequenceA() {
		return sequenceA;
	}
	public void setSequenceA(String sequenceA) {
		this.sequenceA = sequenceA;
		notifyIfReady(Event.SEQUENCE_A_CHANGE);
	}
	public String getSequenceB() {
		return sequenceB;
	}
	public void setSequenceB(String sequenceB) {
		this.sequenceB = sequenceB;
		notifyIfReady(Event.SEQUENCE_B_CHANGE);
	}
	public int[][] getMatrixData() {
		return matrixData;
	}

	public void setMatrixData(int[][] customMatrix) {
		this.matrixData = customMatrix;
		notifyIfReady(Event.MATRIX_DATA_CHANGED);
	}
	public void setCustomMatrixColumnHeader(String column_header) {
        this.columnHeaders = column_header;
        notifyIfReady(null);}
	public String getCustomMatrixColumnHeader() { return columnHeaders; }
    public void setCustomMatrixRowHeader(String row_headers) {
        this.rowHeaders = row_headers;
        notifyIfReady(null);}
    public String getCustomMatrixRowHeader() { return rowHeaders; }
	public int getGapPenalty() {
		return gapPenalty;
	}
	public void setGapPenalty(int gapPenalty) {
		this.gapPenalty = gapPenalty;
		notifyIfReady(Event.GAP_PENALTY_CHANGE);
	}
	public static String toTrimmedString(String[] arr) {
		for (int i = 0; i < arr.length; i++)
			arr[i] = arr[i].substring(0, 1);
		return java.util.Arrays.toString(arr);
	}

	/**
	 * Returns if any arguments in this object are null.
	 * @return boolean AND of null status of all arguments.
	 */
	private boolean checkNoNulls()
	{
		// TODO: Make sure all nullable fields in this object are accounted for in the boolean statement.
		return (this.sequenceA != null &&
				this.sequenceB != null &&
				this.matrixData != null &&
				this.rowHeaders != null &&
				this.columnHeaders != null &&
				this.matrixType != null
		);
	}
}
